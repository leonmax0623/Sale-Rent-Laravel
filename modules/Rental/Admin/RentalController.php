<?php
/**
 * Created by PhpStorm.
 * User: Admin
 * Date: 7/30/2019
 * Time: 1:56 PM
 */
namespace Modules\Rental\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Core\Events\CreatedServicesEvent;
use Modules\Core\Events\UpdatedServiceEvent;
use Modules\Core\Models\Attributes;
use Modules\Core\Models\Terms;
use Modules\Location\Models\Location;
use Modules\Location\Models\LocationCategory;
use Modules\Rental\Models\Rental;
use Modules\Rental\Models\RentalTerm;
use Modules\Rental\Models\RentalTranslation;
use Modules\Sale\Models\Sale;
use Modules\Hotel\Models\Hotel;
use Modules\Space\Models\Space;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Validator;

class RentalController extends AdminController
{
    protected $space;
    protected $space_translation;
    protected $space_term;
    protected $attributes;
    protected $location;
    /**
     * @var string
     */
    private $locationCategoryClass;
    protected $field_country = 'United States of America';

    public function __construct()
    {
        parent::__construct();
        $this->setActiveMenu('admin/module/property-rental');
        $this->space = Rental::class;
        $this->space_translation = RentalTranslation::class;
        $this->space_term = RentalTerm::class;
        $this->attributes = Attributes::class;
        $this->location = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }

    public function callAction($method, $parameters)
    {
        if(!Rental::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $this->checkPermission('space_view');
        $query = $this->space::query() ;
        $query->orderBy('id', 'desc');
        if (!empty($space_name = $request->input('s'))) {
            $query->where(function($query) use ($space_name) {
                $query->where('title', 'LIKE', '%' . $space_name . '%')
                    ->orWhere('uid', 'LIKE', '%' . $space_name . '%')
                    ->orWhere('slug', 'LIKE', '%' . $space_name . '%');
                    //->orderBy('title', 'asc');
            });
        }

        if ($this->hasPermission('space_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('create_user', $author);
            }
        } else {
            $query->where('create_user', Auth::id());
        }
        $data = [
            'rows'               => $query->with(['author'])->paginate(20),
            'space_manage_others' => $this->hasPermission('space_manage_others'),
            'breadcrumbs'        => [
                [
                    'name' => __('Property Rental'),
                    'url'  => 'admin/module/property-rental'
                ],
                [
                    'name'  => __('All'),
                    'class' => 'active'
                ],
            ],
            'page_title'=>__("Property Rental Management")
        ];
        return view('Rental::admin.index', $data);
    }

    public function recovery(Request $request)
    {
        $this->checkPermission('space_view');
        $query = $this->space::onlyTrashed() ;
        $query->orderBy('id', 'desc');
        if (!empty($space_name = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $space_name . '%');
            $query->orderBy('title', 'asc');
        }

        if ($this->hasPermission('space_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('create_user', $author);
            }
        } else {
            $query->where('create_user', Auth::id());
        }
        $data = [
            'rows'               => $query->with(['author'])->paginate(20),
            'space_manage_others' => $this->hasPermission('space_manage_others'),
            'recovery'           => 1,
            'breadcrumbs'        => [
                [
                    'name' => __('Property Rental'),
                    'url'  => 'admin/module/property-rental'
                ],
                [
                    'name'  => __('Recovery'),
                    'class' => 'active'
                ],
            ],
            'page_title'=>__("Recovery Property Rental Management")
        ];
        return view('Rental::admin.index', $data);
    }

    public function create(Request $request)
    {
        $attId = 29;
        $values = Terms::where("attr_id", $attId)->orderBy('id', 'DESC')->get();

        $this->checkPermission('space_create');
        $row = new $this->space();
        $row->fill([
            'status' => 'publish'
        ]);
        $row->country = $this->field_country;
        $data = [
            'row'            => $row,
            'attributes'     => $this->attributes::where('service', 'space')->get(),
            'space_location' => $this->location::where('status', 'publish')->get()->toTree(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            'translation'    => new $this->space_translation(),
            'types' => $values,
            'breadcrumbs'    => [
                [
                    'name' => __('Property Rental'),
                    'url'  => 'admin/module/property-rental'
                ],
                [
                    'name'  => __('Add Property Rental'),
                    'class' => 'active'
                ],
            ],
            'page_title'     => __("Add new Property Rental")
        ];
        return view('Rental::admin.detail', $data);
    }

    public function edit(Request $request, $id)
    {
        $attId = 29;
        $values = Terms::where("attr_id", $attId)->orderBy('id', 'DESC')->get();

        $this->checkPermission('space_update');
        $row = $this->space::find($id);
        if (empty($row)) {
            return redirect(route('rental.admin.index'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        if (!$this->hasPermission('space_manage_others')) {
            if ($row->create_user != Auth::id()) {
                return redirect(route('rental.admin.index'));
            }
        }
        $data = [
            'row'            => $row,
            'translation'    => $translation,
            "selected_terms" => $row->terms->pluck('term_id'),
            'attributes'     => $this->attributes::where('service', 'space')->get(),
            'space_location'  => $this->location::where('status', 'publish')->get()->toTree(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            'enable_multi_lang'=>true,
            'types' => $values,
            'breadcrumbs'    => [
                [
                    'name' => __('Property Rental'),
                    'url'  => 'admin/module/property-rental'
                ],
                [
                    'name'  => __('Edit Property Rental'),
                    'class' => 'active'
                ],
            ],
            'page_title'=>__("Edit::name",['name'=>$row->title])
        ];
        return view('Rental::admin.detail', $data);
    }

    public function store( Request $request, $id )
    {
        $validator_rules = [
            'title' => 'required|max:255',
        ];
        if(!$request->input('lang') || is_default_lang($request->input('lang'))) {
            $validator_rules['property_type_id'] = 'required';
            $validator_rules['postal_code'] = 'required';
            $validator_rules['postal_code_autocomplete'] = 'same:postal_code';
            $validator_rules['city'] = 'required';
            $validator_rules['city_autocomplete'] = 'same:city';
            $validator_rules['state'] = 'required';
            $validator_rules['state_autocomplete'] = 'same:state';
            $validator_rules['district'] = 'required';
            $validator_rules['district_autocomplete'] = 'same:district';
            $validator_rules['street'] = 'required';
            $validator_rules['street_autocomplete'] = 'same:street';
            $validator_rules['building_number'] = 'required';
            //$validator_rules['building_number_autocomplete'] = 'same:building_number';
            $validator_rules['map_lat'] = 'required';
            $validator_rules['map_lat_autocomplete'] = 'same:map_lat';
            $validator_rules['map_lng'] = 'required';
            $validator_rules['map_lng_autocomplete'] = 'same:map_lng';
        }
        $validator = Validator::make($request->all(), $validator_rules, [
            'title.required' => 'The "Property Name" field is required',
            'property_type_id.required' => 'The "Property Type" field is required',
            'postal_code.required' => 'The "Postal Code" field is required',
            'postal_code_autocomplete.same' => 'The "Postal Code" field should be filled in via hints',
            'city.required' => 'The "City" field is required',
            'city_autocomplete.same' => 'The "City" field should be filled in via hints',
            'state.required' => 'The "State" field is required',
            'state_autocomplete.same' => 'The "State" field should be filled in via hints',
            'district.required' => 'The "District" field is required',
            'district_autocomplete.same' => 'The "District" field should be filled in via hints',
            'street.required' => 'The "Street" field is required',
            'street_autocomplete.same' => 'The "Street" field should be filled in via hints',
            'building_number.required' => 'The "Building Number" field is required',
            //'building_number_autocomplete.same' => 'The "Building Number" field should be filled in via hints',
            'map_lat.required' => 'The "Map Latitude" field is required',
            'map_lat_autocomplete.same' => 'The "Map Latitude" field should be filled in via hints',
            'map_lng.required' => 'The "Map Longitude" field is required',
            'map_lng_autocomplete.same' => 'The "Map Longitude" field should be filled in via hints',
        ]);
        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }
        
        if($id>0){
            $this->checkPermission('space_update');
            $row = $this->space::find($id);
            if (empty($row)) {
                return redirect(route('rental.admin.index'));
            }

            if($row->create_user != Auth::id() and !$this->hasPermission('space_manage_others'))
            {
                return redirect(route('rental.admin.index'));
            }
        }else{
            $this->checkPermission('space_create');
            $row = new $this->space();
            $row->status = "publish";
        }
        $dataKeys = [
            'title',
            'content',
            'price',
            'is_instant',
            'status',
            'video',
            'faqs',
            'image_id',
            'banner_image_id',
            'gallery',
            'bed',
            'bathroom',
            'square',
            'location_id',
            'autocomplete',
            'address',
            'country',
            'postal_code',
            'city',
            'state',
            'district',
            'street',
            'building_number',
            'building_body_number',
            'apartment_number',
            'map_lat',
            'map_lng',
            'map_zoom',
            'price',
            'sale_price',
            'max_guests',
            'enable_extra_price',
            'extra_price',
            'is_featured',
            'default_state',
            'min_day_before_booking',
            'min_day_stays',
            'surrounding',

        ];
        if(!$request->input('lang') || is_default_lang($request->input('lang'))) {
            $dataKeys[] = 'property_type_id';
        }
        
        if($this->hasPermission('space_manage_others')){
            $dataKeys[] = 'create_user';
        }

        $row->fillByAttr($dataKeys,$request->input());
        if($request->input('slug')){
            $row->slug = $request->input('slug');
        }
	    $row->ical_import_url  = $request->ical_import_url;
        $row->enable_service_fee = $request->input('enable_service_fee');
        $row->service_fee = $request->input('service_fee');
        if(!$request->input('lang') || is_default_lang($request->input('lang'))) {
            $row->slug = Str::slug($row->title);
        }
        $row->save();

        $res = $row->saveOriginOrTranslation($request->input('lang'),true);

        if ($res) {
            if(!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }

            if($id > 0 ){
                event(new UpdatedServiceEvent($row));

                return back()->with('success',  __('Property Rental updated') );
            }else{
                $sale_count = Sale::count();
                $hotel_count = Hotel::count();
                $rental_count = Rental::count();
                $space_count = Space::count();
                $total_count = $sale_count + $hotel_count + $rental_count + $space_count;
                $row->uid = 'pr-' . $total_count;
                $row->save();
            
                event(new CreatedServicesEvent($row));

                return redirect(route('rental.admin.edit',$row->id))->with('success', __('Space created') );
            }
        }
    }

    public function saveTerms($row, $request)
    {
        $this->checkPermission('space_manage_attributes');
        if (empty($request->input('terms'))) {
            $this->space_term::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->space_term::firstOrCreate([
                    'term_id' => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->space_term::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }

    public function bulkEdit(Request $request)
    {

        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }

        switch ($action){
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->space::where("id", $id);
                    if (!$this->hasPermission('space_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('space_delete');
                    }
                    $row  =  $query->first();
                    if(!empty($row)){
                        $row->delete();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "permanently_delete":
                foreach ($ids as $id) {
                    $query = $this->space::where("id", $id);
                    if (!$this->hasPermission('space_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('space_delete');
                    }
                    $row  =  $query->withTrashed()->first();
                    if($row){
                        $row->forceDelete();
                    }
                }
                return redirect()->back()->with('success', __('Permanently delete success!'));
                break;
            case "recovery":
                foreach ($ids as $id) {
                    $query = $this->space::withTrashed()->where("id", $id);
                    if (!$this->hasPermission('space_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('space_delete');
                    }
                    $row = $query->first();
                    if(!empty($row)){
                        $row->restore();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Recovery success!'));
                break;
            case "clone":
                $this->checkPermission('space_create');
                foreach ($ids as $id) {
                    (new $this->space())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->space::where("id", $id);
                    if (!$this->hasPermission('space_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('space_update');
                    }
                    $row = $query->first();
                    $row->status  = $action;
                    $row->save();
                        event(new UpdatedServiceEvent($row));
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }


    }

    public function getForSelect2(Request $request)
    {
        $pre_selected = $request->query('pre_selected');
        $selected = $request->query('selected');
        if ($pre_selected && $selected) {
            if (is_array($selected)) {
                $items = $this->space::select('id', 'title as text')->whereIn('id', $selected)->take(50)->get();
                return response()->json([
                    'items' => $items
                ]);
            } else {
                $item = $this->space::find($selected);
            }
            if (empty($item)) {
                return response()->json([
                    'text' => ''
                ]);
            } else {
                return response()->json([
                    'text' => $item->name
                ]);
            }
        }
        $q = $request->query('q');
        $query = $this->space::select('id', 'title as text')->where("status", "publish");
        if ($q) {
            $query->where('name', 'like', '%' . $q . '%');
        }
        $res = $query->orderBy('id', 'desc')->limit(20)->get();
        return response()->json([
            'results' => $res
        ]);
    }

    public function getAllForSelect2(Request $request)
    {
        $values = \Modules\Space\Models\SpaceTerm::query()->with('term', function($query) {
            $query->where('attr_id', 3);
        })->whereHas('term', function ($query) {
            $query->where('attr_id', 3);
        })->groupBy('term_id')->orderBy('id', 'DESC')->get();

        $data = [];

        if(count($values) > 0 ) {
            foreach($values as $item) {
                $data[] = [

                    'id' => $item->term->id,

                    'text' => $item->term->name ? $item->term->name . ' (#' . $item->term->id . ')' :  ' (#' . $item->term->id . ')',

                ];
            }
        }

        return response()->json(['results' => $data]);
    }
}
